{
    "id": "react",
    "name": "Curso intensivo de React",
    "description": "Aprende React, la librería de JavaScript para construir interfaces de usuario modernas, dinámicas y reactivas 💻.",
    "modulos": [
        {
            "id": 1,
            "title": "Introducción a React",
            "description": "Conocerás qué es React, su historia y cómo instalarlo en tu proyecto.",
            "lecciones": [
                {
                    "id": "a1",
                    "title": "¿Qué es React?",
                    "explicacion": "React es una librería de JavaScript para construir interfaces de usuario basadas en componentes, reactivas y reutilizables. Se centra en la vista (V) del patrón MVC."
                },
                {
                    "id": "a2",
                    "title": "Historia de React",
                    "explicacion": "Creado por Facebook en 2013, React se ha convertido en una de las librerías más populares para construir aplicaciones web y móviles (con React Native)."
                },
                {
                    "id": "a3",
                    "title": "Instalación y entorno",
                    "explicacion": "Se puede instalar usando `create-react-app`, Vite o Next.js. `npx create-react-app mi-app` genera un proyecto listo para empezar a programar."
                }
            ],
            "video": "",
            "dato": "React permite construir interfaces modernas y dinámicas usando componentes reutilizables."
        },
        {
            "id": 2,
            "title": "JSX y componentes",
            "description": "Aprenderás a escribir JSX y crear componentes funcionales y de clase.",
            "lecciones": [
                {
                    "id": "b1",
                    "title": "JSX",
                    "explicacion": "JSX es una extensión de JavaScript que permite escribir código HTML dentro de JS: `<h1>Hola Mundo</h1>`. React lo transpila a llamadas a `React.createElement`."
                },
                {
                    "id": "b2",
                    "title": "Componentes funcionales",
                    "explicacion": "Son funciones que devuelven JSX: `function Saludo() { return <h1>Hola</h1>; }`. Son simples y recomendados para la mayoría de casos."
                },
                {
                    "id": "b3",
                    "title": "Componentes de clase",
                    "explicacion": "Se definen usando clases: `class Saludo extends React.Component { render() { return <h1>Hola</h1>; } }`. Su uso disminuye con Hooks."
                }
            ],
            "video": "",
            "dato": "JSX y componentes son la base de React, permitiendo interfaces modulares y reutilizables."
        },
        {
            "id": 3,
            "title": "Props y estado",
            "description": "Aprenderás a pasar información entre componentes y manejar datos dinámicos.",
            "lecciones": [
                {
                    "id": "c1",
                    "title": "Props",
                    "explicacion": "Las props permiten pasar datos desde un componente padre a uno hijo: `<Saludo nombre='Angelo' />`. Son inmutables dentro del componente hijo."
                },
                {
                    "id": "c2",
                    "title": "Estado (state)",
                    "explicacion": "El state permite manejar datos internos del componente que cambian con el tiempo. En componentes funcionales se usa `useState`."
                },
                {
                    "id": "c3",
                    "title": "Eventos y manejo de estado",
                    "explicacion": "Se usan eventos como `onClick`, `onChange` para actualizar el estado: `const [count, setCount] = useState(0); <button onClick={()=>setCount(count+1)}>+</button>`"
                }
            ],
            "video": "",
            "dato": "Props y state permiten que los componentes sean dinámicos y reactivos a la interacción del usuario."
        },
        {
            "id": 4,
            "title": "Hooks y ciclo de vida",
            "description": "Aprenderás a manejar efectos secundarios y el ciclo de vida de los componentes.",
            "lecciones": [
                {
                    "id": "d1",
                    "title": "useEffect",
                    "explicacion": "Hook que permite ejecutar código después de renderizar: `useEffect(() => { console.log('Se montó'); }, []);`"
                },
                {
                    "id": "d2",
                    "title": "Otros hooks importantes",
                    "explicacion": "Hooks como `useRef`, `useContext` y `useReducer` permiten manejar referencias, contexto global y lógica compleja dentro de componentes funcionales."
                },
                {
                    "id": "d3",
                    "title": "Ciclo de vida en componentes de clase",
                    "explicacion": "En clases existen métodos como `componentDidMount`, `componentDidUpdate` y `componentWillUnmount` que manejan el ciclo de vida de los componentes."
                }
            ],
            "video": "",
            "dato": "Hooks simplifican la lógica y permiten reemplazar los antiguos métodos de ciclo de vida de clases."
        },
        {
            "id": 5,
            "title": "Routing y gestión de datos",
            "description": "Aprenderás a crear múltiples páginas y gestionar datos entre componentes y contextos.",
            "lecciones": [
                {
                    "id": "e1",
                    "title": "React Router",
                    "explicacion": "Permite crear navegación entre páginas: `<Route path='/home' element={<Home />} />` y `<Link to='/home'>Ir a Home</Link>`."
                },
                {
                    "id": "e2",
                    "title": "Context API",
                    "explicacion": "Permite compartir datos globales entre componentes sin pasar props manualmente: `const UserContext = React.createContext();`"
                },
                {
                    "id": "e3",
                    "title": "Integración con APIs",
                    "explicacion": "Usa `fetch` o Axios dentro de `useEffect` para obtener datos externos y mostrarlos en tus componentes dinámicamente."
                }
            ],
            "video": "",
            "dato": "Routing y context permiten construir aplicaciones complejas con navegación y estado global centralizado."
        },
        {
            "id": 6,
            "title": "Buenas prácticas y optimización",
            "description": "Aprenderás a escribir aplicaciones React limpias, mantenibles y optimizadas.",
            "lecciones": [
                {
                    "id": "f1",
                    "title": "Organización de componentes",
                    "explicacion": "Separar componentes en carpetas, usar naming consistente y mantener la estructura clara facilita mantenimiento y escalabilidad."
                },
                {
                    "id": "f2",
                    "title": "Optimización de rendimiento",
                    "explicacion": "Usar `React.memo`, lazy loading y evitar renders innecesarios mejora la eficiencia de la app."
                },
                {
                    "id": "f3",
                    "title": "Testing y depuración",
                    "explicacion": "Usa herramientas como React DevTools, Jest y Testing Library para asegurar que la aplicación funcione correctamente y detectar errores rápidamente."
                }
            ],
            "video": "",
            "dato": "Aplicaciones bien organizadas y optimizadas brindan una experiencia de usuario profesional y fluida."
        }
    ]
}
