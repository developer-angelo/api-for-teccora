{
    "id": "nodejs",
    "name": "Curso intensivo de Node.js",
    "description": "Aprende Node.js, el entorno de ejecuci√≥n de JavaScript en el servidor, para crear aplicaciones r√°pidas, escalables y modernas üñ•Ô∏è.",
    "modulos": [
        {
            "id": 1,
            "title": "Introducci√≥n a Node.js",
            "description": "Conocer√°s qu√© es Node.js, su historia y c√≥mo instalarlo en tu m√°quina.",
            "lecciones": [
                {
                    "id": "a1",
                    "title": "¬øQu√© es Node.js?",
                    "explicacion": "Node.js es un entorno de ejecuci√≥n de JavaScript del lado del servidor. Permite ejecutar c√≥digo JS fuera del navegador y crear aplicaciones web r√°pidas y escalables usando el motor V8 de Chrome."
                },
                {
                    "id": "a2",
                    "title": "Historia de Node.js",
                    "explicacion": "Creado por Ryan Dahl en 2009, Node.js se populariz√≥ por su arquitectura basada en eventos y su capacidad de manejar gran cantidad de conexiones concurrentes."
                },
                {
                    "id": "a3",
                    "title": "Instalaci√≥n y entorno",
                    "explicacion": "Node.js se instala desde nodejs.org y viene con npm, el gestor de paquetes. Con esto puedes instalar librer√≠as, frameworks y herramientas necesarias para tus proyectos."
                }
            ],
            "video": "",
            "dato": "Node.js permite usar JavaScript tanto en frontend como en backend, unificando el stack."
        },
        {
            "id": 2,
            "title": "M√≥dulos y npm",
            "description": "Aprender√°s a usar m√≥dulos, paquetes y organizar tu proyecto Node.js.",
            "lecciones": [
                {
                    "id": "b1",
                    "title": "M√≥dulos en Node.js",
                    "explicacion": "Node.js usa m√≥dulos para organizar el c√≥digo. `require` importa m√≥dulos: `const fs = require('fs');` para trabajar con archivos."
                },
                {
                    "id": "b2",
                    "title": "npm y paquetes",
                    "explicacion": "npm (Node Package Manager) permite instalar librer√≠as externas: `npm install express` para agregar frameworks y herramientas al proyecto."
                },
                {
                    "id": "b3",
                    "title": "M√≥dulos locales",
                    "explicacion": "Puedes crear tus propios m√≥dulos exportando funciones o variables con `module.exports` y us√°ndolos en otros archivos con `require`."
                }
            ],
            "video": "",
            "dato": "Node.js tiene un ecosistema enorme de librer√≠as que facilitan cualquier tipo de desarrollo backend."
        },
        {
            "id": 3,
            "title": "Eventos y asincron√≠a",
            "description": "Aprender√°s a manejar eventos y c√≥digo as√≠ncrono, clave para aplicaciones modernas en Node.js.",
            "lecciones": [
                {
                    "id": "c1",
                    "title": "Event Loop",
                    "explicacion": "Node.js maneja operaciones as√≠ncronas usando un Event Loop que permite procesar m√∫ltiples tareas sin bloquear el servidor."
                },
                {
                    "id": "c2",
                    "title": "Callbacks",
                    "explicacion": "Funciones que se pasan como argumentos y se ejecutan al completar una operaci√≥n as√≠ncrona: `fs.readFile('archivo.txt', (err, data) => { console.log(data); });`"
                },
                {
                    "id": "c3",
                    "title": "Promises y async/await",
                    "explicacion": "Las Promises y `async/await` facilitan manejar c√≥digo as√≠ncrono de forma m√°s clara y legible."
                }
            ],
            "video": "",
            "dato": "El manejo de asincron√≠a es la base de la eficiencia y escalabilidad de Node.js."
        },
        {
            "id": 4,
            "title": "Creando servidores con Node.js",
            "description": "Aprender√°s a crear servidores web y manejar solicitudes HTTP.",
            "lecciones": [
                {
                    "id": "d1",
                    "title": "Servidor HTTP b√°sico",
                    "explicacion": "Node.js permite crear servidores simples con el m√≥dulo `http`: `const http = require('http'); http.createServer((req,res) => { res.end('Hola mundo'); }).listen(3000);`"
                },
                {
                    "id": "d2",
                    "title": "Rutas y manejo de peticiones",
                    "explicacion": "Puedes manejar rutas y distintos tipos de solicitudes HTTP (`GET`, `POST`, `PUT`, `DELETE`) usando condicionales o frameworks como Express."
                },
                {
                    "id": "d3",
                    "title": "Framework Express",
                    "explicacion": "Express simplifica la creaci√≥n de servidores y manejo de rutas: `const express = require('express'); const app = express(); app.get('/', (req,res)=>{ res.send('Hola'); }); app.listen(3000);`"
                }
            ],
            "video": "",
            "dato": "Express es el framework m√°s usado en Node.js para crear aplicaciones web robustas y r√°pidas."
        },
        {
            "id": 5,
            "title": "Bases de datos con Node.js",
            "description": "Aprender√°s a conectar Node.js con bases de datos SQL y NoSQL.",
            "lecciones": [
                {
                    "id": "e1",
                    "title": "Conexi√≥n a SQLite",
                    "explicacion": "Usando el paquete `sqlite3`, puedes conectar y ejecutar consultas a bases de datos SQLite desde Node.js."
                },
                {
                    "id": "e2",
                    "title": "Conexi√≥n a MySQL o PostgreSQL",
                    "explicacion": "Paquetes como `mysql2` o `pg` permiten conectar Node.js a bases de datos relacionales en proyectos m√°s grandes."
                },
                {
                    "id": "e3",
                    "title": "Operaciones CRUD",
                    "explicacion": "Node.js puede ejecutar consultas SQL para crear, leer, actualizar y eliminar datos desde la base de datos, integrando la l√≥gica del backend con la persistencia de datos."
                }
            ],
            "video": "",
            "dato": "Node.js puede trabajar con cualquier base de datos usando librer√≠as adecuadas, haciendo tus aplicaciones completas y din√°micas."
        },
        {
            "id": 6,
            "title": "Buenas pr√°cticas y seguridad en Node.js",
            "description": "Aprender√°s a escribir c√≥digo profesional, seguro y mantenible.",
            "lecciones": [
                {
                    "id": "f1",
                    "title": "Estructura de proyectos",
                    "explicacion": "Organizar carpetas y archivos, separar rutas, controladores, modelos y configuraciones mejora mantenimiento y escalabilidad."
                },
                {
                    "id": "f2",
                    "title": "Manejo de errores y logging",
                    "explicacion": "Usar `try/catch`, middlewares de manejo de errores y librer√≠as de logging permite depurar y mantener aplicaciones robustas."
                },
                {
                    "id": "f3",
                    "title": "Seguridad b√°sica",
                    "explicacion": "Validar entradas de usuarios, usar `helmet`, `cors` y proteger rutas con autenticaci√≥n evita ataques comunes como inyecci√≥n de c√≥digo o accesos no autorizados."
                }
            ],
            "video": "",
            "dato": "C√≥digo limpio, seguro y modular es la base para aplicaciones Node.js profesionales y escalables."
        }
    ]
}
