{
    "id": "js",
    "name": "Curso intensivo de JavaScript",
    "description": "Aprende el lenguaje de programación que da vida a las páginas web, desde interactividad básica hasta lógica avanzada ⚡.",
    "modulos": [
        {
            "id": 1,
            "title": "Introducción a JavaScript",
            "description": "Conocerás qué es JavaScript, cómo funciona y cómo integrarlo en tus páginas web.",
            "lecciones": [
                {
                    "id": "a1",
                    "title": "¿Qué es JavaScript?",
                    "explicacion": "JavaScript es un lenguaje de programación interpretado que se ejecuta en el navegador. Permite agregar interactividad a las páginas web, manipular el DOM, validar formularios, crear animaciones y mucho más."
                },
                {
                    "id": "a2",
                    "title": "Dónde y cómo usar JS",
                    "explicacion": "JavaScript puede incluirse inline en HTML con `<script>`, como archivo externo `.js` enlazado con `<script src='archivo.js'></script>`, o ejecutarse en entornos como Node.js fuera del navegador."
                },
                {
                    "id": "a3",
                    "title": "Sintaxis básica",
                    "explicacion": "JavaScript utiliza variables (`let`, `const`, `var`), operadores, funciones, condiciones (`if`, `else`), bucles (`for`, `while`) y objetos para manejar la lógica de las páginas."
                }
            ],
            "video": "",
            "dato": "JS es el lenguaje clave para crear páginas web dinámicas, complementando HTML y CSS."
        },
        {
            "id": 2,
            "title": "Variables, tipos y operadores",
            "description": "Aprenderás a manejar datos en JavaScript y realizar operaciones básicas.",
            "lecciones": [
                {
                    "id": "b1",
                    "title": "Variables y constantes",
                    "explicacion": "Se utilizan `let` y `const` para almacenar datos. `let` permite reasignar valores, mientras que `const` mantiene el valor constante."
                },
                {
                    "id": "b2",
                    "title": "Tipos de datos",
                    "explicacion": "JavaScript maneja tipos primitivos como `string`, `number`, `boolean`, `null`, `undefined` y `symbol`, además de objetos y arrays."
                },
                {
                    "id": "b3",
                    "title": "Operadores",
                    "explicacion": "Incluyen aritméticos (`+`, `-`, `*`, `/`), de asignación (`=`, `+=`), de comparación (`==`, `===`, `!=`, `!==`) y lógicos (`&&`, `||`, `!`)."
                }
            ],
            "video": "",
            "dato": "Dominar variables y tipos es la base para cualquier programa en JavaScript."
        },
        {
            "id": 3,
            "title": "Condicionales y bucles",
            "description": "Controla el flujo de tus programas tomando decisiones y repitiendo tareas automáticamente.",
            "lecciones": [
                {
                    "id": "c1",
                    "title": "Condicionales",
                    "explicacion": "Las estructuras `if`, `else if` y `else` permiten ejecutar código según condiciones específicas. También existen los operadores ternarios para decisiones rápidas."
                },
                {
                    "id": "c2",
                    "title": "Bucles",
                    "explicacion": "Los bucles `for`, `while` y `do...while` permiten repetir acciones múltiples veces. Son fundamentales para procesar arrays o datos dinámicos."
                },
                {
                    "id": "c3",
                    "title": "Break y continue",
                    "explicacion": "`break` detiene un bucle antes de que termine, y `continue` salta a la siguiente iteración. Ambos ayudan a controlar el flujo de repetición."
                }
            ],
            "video": "",
            "dato": "Condicionales y bucles son el motor que permite que tus programas tomen decisiones y repitan tareas eficientemente."
        },
        {
            "id": 4,
            "title": "Funciones y eventos",
            "description": "Aprenderás a organizar tu código en bloques reutilizables y responder a interacciones del usuario.",
            "lecciones": [
                {
                    "id": "d1",
                    "title": "Funciones",
                    "explicacion": "Las funciones encapsulan código que se puede reutilizar. Se definen con `function nombre() { }` o con arrow functions: `const nombre = () => { }`."
                },
                {
                    "id": "d2",
                    "title": "Parámetros y retorno",
                    "explicacion": "Las funciones pueden recibir parámetros para procesar información y devolver resultados usando `return`."
                },
                {
                    "id": "d3",
                    "title": "Eventos en el DOM",
                    "explicacion": "Los eventos permiten que tu código responda a acciones del usuario, como clicks (`onclick`), cambios en inputs (`onchange`) o movimiento del mouse (`onmousemove`)."
                }
            ],
            "video": "",
            "dato": "Funciones y eventos son esenciales para crear aplicaciones interactivas y dinámicas."
        },
        {
            "id": 5,
            "title": "Arrays y objetos",
            "description": "Aprenderás a manejar colecciones de datos y estructuras complejas en JS.",
            "lecciones": [
                {
                    "id": "e1",
                    "title": "Arrays",
                    "explicacion": "Los arrays almacenan listas de elementos, accesibles por índice. Métodos como `push()`, `pop()`, `map()`, `filter()` y `forEach()` permiten manipularlos eficientemente."
                },
                {
                    "id": "e2",
                    "title": "Objetos",
                    "explicacion": "Los objetos agrupan datos y funciones bajo un mismo nombre usando `key: value`. Permiten modelar información compleja, como un usuario `{ nombre: 'Angelo', edad: 14 }`."
                },
                {
                    "id": "e3",
                    "title": "Destructuring y spread",
                    "explicacion": "Destructuring permite extraer valores de arrays y objetos fácilmente. Spread (`...`) ayuda a copiar y combinar arrays u objetos sin mutarlos."
                }
            ],
            "video": "",
            "dato": "Arrays y objetos son fundamentales para manejar datos dinámicos en cualquier aplicación web."
        },
        {
            "id": 6,
            "title": "JavaScript moderno y buenas prácticas",
            "description": "Explora ES6+ y técnicas modernas para escribir código limpio, eficiente y mantenible.",
            "lecciones": [
                {
                    "id": "f1",
                    "title": "ES6+ y sintaxis moderna",
                    "explicacion": "Aprende `let`, `const`, arrow functions, template literals, destructuring, módulos y clases, que hacen el código más legible y poderoso."
                },
                {
                    "id": "f2",
                    "title": "Manipulación del DOM",
                    "explicacion": "Con métodos como `querySelector`, `getElementById`, `appendChild` y `removeChild` puedes crear, modificar y eliminar elementos dinámicamente."
                },
                {
                    "id": "f3",
                    "title": "Buenas prácticas",
                    "explicacion": "Mantener un código modular, comentar funciones, evitar duplicación y usar nombres claros facilita el mantenimiento y escalabilidad del proyecto."
                }
            ],
            "video": "",
            "dato": "Escribir código limpio y moderno hace que tus proyectos sean profesionales y fáciles de mantener."
        }
    ]
}