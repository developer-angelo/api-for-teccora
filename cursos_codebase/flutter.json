{
    "id": "flutter",
    "name": "Curso intensivo de Flutter",
    "description": "Aprende Flutter para crear aplicaciones móviles nativas y multiplataforma con rendimiento nativo usando Dart 📲.",
    "modulos": [
        {
            "id": 1,
            "title": "Introducción a Flutter",
            "description": "Conocerás qué es Flutter, su historia y cómo instalarlo en tu máquina.",
            "lecciones": [
                {
                    "id": "a1",
                    "title": "¿Qué es Flutter?",
                    "explicacion": "Flutter es un framework de UI de código abierto de Google que permite crear aplicaciones nativas para iOS, Android y web usando un único código base con el lenguaje Dart."
                },
                {
                    "id": "a2",
                    "title": "Historia de Flutter",
                    "explicacion": "Lanzado por Google en 2017, Flutter combina widgets personalizables, alta velocidad de renderizado y compilación nativa, ofreciendo aplicaciones fluidas y de gran rendimiento."
                },
                {
                    "id": "a3",
                    "title": "Instalación y entorno",
                    "explicacion": "Flutter se instala descargando el SDK desde flutter.dev y configurando variables de entorno. Puedes usar Android Studio, VS Code o IntelliJ para desarrollar."
                }
            ],
            "video": "",
            "dato": "Flutter permite escribir una sola base de código para aplicaciones multiplataforma con apariencia nativa."
        },
        {
            "id": 2,
            "title": "Fundamentos de Dart",
            "description": "Aprenderás lo básico del lenguaje Dart, necesario para programar en Flutter.",
            "lecciones": [
                {
                    "id": "b1",
                    "title": "Variables y tipos",
                    "explicacion": "Dart es tipado, con tipos como `int`, `double`, `String`, `bool`, `List` y `Map`. Ejemplo: `int edad = 14; String nombre = 'Angelo';`"
                },
                {
                    "id": "b2",
                    "title": "Funciones y control de flujo",
                    "explicacion": "Se definen con `void saludar() { print('Hola'); }`. Usa `if`, `for`, `while` y `switch` para controlar la ejecución."
                },
                {
                    "id": "b3",
                    "title": "Clases y objetos",
                    "explicacion": "Dart es orientado a objetos: `class Persona { String nombre; int edad; Persona(this.nombre, this.edad); }` permite crear instancias y manejar datos de forma estructurada."
                }
            ],
            "video": "",
            "dato": "Dart es la base de Flutter, por lo que entender su sintaxis y tipos es esencial."
        },
        {
            "id": 3,
            "title": "Widgets y UI",
            "description": "Aprenderás a construir interfaces usando widgets y layouts en Flutter.",
            "lecciones": [
                {
                    "id": "c1",
                    "title": "Widgets básicos",
                    "explicacion": "Widgets como `Container`, `Text`, `Row`, `Column` y `Image` son los bloques fundamentales para construir interfaces."
                },
                {
                    "id": "c2",
                    "title": "Layouts y Flex",
                    "explicacion": "Usa `Row`, `Column`, `Expanded`, `Stack` y `Padding` para organizar los elementos y crear diseños responsivos."
                },
                {
                    "id": "c3",
                    "title": "Widgets interactivos",
                    "explicacion": "Componentes como `Button`, `TextField`, `Switch` y `Slider` permiten capturar interacciones del usuario y hacer la app dinámica."
                }
            ],
            "video": "",
            "dato": "Flutter usa widgets para todo: diseño, estilo y comportamiento, haciendo la UI modular y reutilizable."
        },
        {
            "id": 4,
            "title": "Estado y manejo de datos",
            "description": "Aprenderás a manejar datos internos y externos en tus aplicaciones Flutter.",
            "lecciones": [
                {
                    "id": "d1",
                    "title": "Stateful vs Stateless",
                    "explicacion": "`StatelessWidget` no cambia con el tiempo, mientras que `StatefulWidget` puede actualizar su estado usando `setState()`."
                },
                {
                    "id": "d2",
                    "title": "State management",
                    "explicacion": "Se pueden usar `Provider`, `Riverpod` o `Bloc` para manejar estados complejos y compartir datos entre widgets de manera eficiente."
                },
                {
                    "id": "d3",
                    "title": "Eventos y callbacks",
                    "explicacion": "Los widgets interactivos usan callbacks: `onPressed`, `onChanged` para actualizar el estado o ejecutar funciones."
                }
            ],
            "video": "",
            "dato": "Manejar correctamente el estado asegura aplicaciones fluidas y coherentes."
        },
        {
            "id": 5,
            "title": "Navegación y rutas",
            "description": "Aprenderás a moverte entre pantallas y organizar la navegación de la app.",
            "lecciones": [
                {
                    "id": "e1",
                    "title": "Navigator básico",
                    "explicacion": "Usa `Navigator.push(context, MaterialPageRoute(builder: (_) => Pantalla2()))` para ir a otra pantalla y `Navigator.pop(context)` para regresar."
                },
                {
                    "id": "e2",
                    "title": "Rutas nombradas",
                    "explicacion": "Definir rutas con nombres facilita la navegación: `routes: {'/home': (_) => HomeScreen(), '/perfil': (_) => PerfilScreen()}` y navegar con `Navigator.pushNamed(context, '/perfil');`"
                },
                {
                    "id": "e3",
                    "title": "Drawer y tabs",
                    "explicacion": "Usa `Drawer` para menús laterales y `TabBar` para navegación por pestañas dentro de la app."
                }
            ],
            "video": "",
            "dato": "La navegación estructurada hace que la app sea fácil de usar y profesional."
        },
        {
            "id": 6,
            "title": "Integración con APIs y almacenamiento",
            "description": "Aprenderás a obtener datos externos y mantenerlos localmente.",
            "lecciones": [
                {
                    "id": "f1",
                    "title": "Consumir APIs REST",
                    "explicacion": "Usa `http` para realizar peticiones: `var response = await http.get(Uri.parse(url));` y manejar datos JSON con `jsonDecode`."
                },
                {
                    "id": "f2",
                    "title": "Persistencia local",
                    "explicacion": "Usa `shared_preferences` o `sqflite` para almacenar datos localmente en la app de manera persistente."
                },
                {
                    "id": "f3",
                    "title": "Integración con backend",
                    "explicacion": "Flutter se puede integrar con Node.js, Firebase, SQL/SQLite u otros backends para crear apps completas y funcionales."
                }
            ],
            "video": "",
            "dato": "Integrar APIs y almacenamiento local permite apps completas y funcionales incluso sin conexión constante."
        },
        {
            "id": 7,
            "title": "Buenas prácticas y optimización",
            "description": "Aprenderás a escribir apps Flutter limpias, mantenibles y optimizadas.",
            "lecciones": [
                {
                    "id": "g1",
                    "title": "Organización de proyectos",
                    "explicacion": "Separar widgets, pantallas, servicios y assets mantiene el proyecto limpio y escalable."
                },
                {
                    "id": "g2",
                    "title": "Optimización de rendimiento",
                    "explicacion": "Usa `const widgets`, `ListView.builder`, `FutureBuilder` y evita rebuilds innecesarios para apps rápidas."
                },
                {
                    "id": "g3",
                    "title": "Testing y depuración",
                    "explicacion": "Usa Flutter DevTools, emuladores y pruebas unitarias/widget tests para asegurar estabilidad y calidad de la app."
                }
            ],
            "video": "",
            "dato": "Apps bien organizadas y optimizadas brindan una experiencia fluida y profesional."
        }
    ]
}
