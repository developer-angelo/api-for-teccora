{
    "id": "nextjs",
    "name": "Curso intensivo de Next.js",
    "description": "Aprende Next.js, un framework de React para construir aplicaciones web r√°pidas, escalables y optimizadas con SSR y SSG üåê.",
    "modulos": [
        {
            "id": 1,
            "title": "Introducci√≥n a Next.js",
            "description": "Conocer√°s qu√© es Next.js, su historia y c√≥mo instalarlo.",
            "lecciones": [
                {
                    "id": "a1",
                    "title": "¬øQu√© es Next.js?",
                    "explicacion": "Next.js es un framework de React que permite crear aplicaciones web con renderizado del lado del servidor (SSR), generaci√≥n est√°tica (SSG) y rutas optimizadas."
                },
                {
                    "id": "a2",
                    "title": "Historia y ventajas",
                    "explicacion": "Creado por Vercel en 2016, Next.js facilita el SEO, rendimiento y escalabilidad, combinando lo mejor de SSR, SSG y React en un solo framework."
                },
                {
                    "id": "a3",
                    "title": "Instalaci√≥n y entorno",
                    "explicacion": "Se instala usando `npx create-next-app mi-app` o `yarn create next-app`. Permite integraci√≥n con TypeScript, TailwindCSS y otras herramientas modernas."
                }
            ],
            "video": "",
            "dato": "Next.js mejora la experiencia del desarrollador y el rendimiento de las aplicaciones web modernas."
        },
        {
            "id": 2,
            "title": "Estructura de un proyecto",
            "description": "Aprender√°s la estructura de carpetas y archivos de un proyecto Next.js.",
            "lecciones": [
                {
                    "id": "b1",
                    "title": "Carpetas principales",
                    "explicacion": "La carpeta `pages/` contiene las rutas de la app, `public/` los assets est√°ticos, y `styles/` los estilos globales o m√≥dulos CSS."
                },
                {
                    "id": "b2",
                    "title": "Pages y rutas",
                    "explicacion": "Cada archivo en `pages/` se convierte en una ruta: `pages/index.js` ‚Üí `/`, `pages/about.js` ‚Üí `/about`."
                },
                {
                    "id": "b3",
                    "title": "Components y layouts",
                    "explicacion": "Se recomienda usar `components/` para componentes reutilizables y `layouts/` para estructuras comunes como encabezados y pies de p√°gina."
                }
            ],
            "video": "",
            "dato": "Next.js organiza proyectos de forma clara, facilitando mantenimiento y escalabilidad."
        },
        {
            "id": 3,
            "title": "Routing y navegaci√≥n",
            "description": "Aprender√°s a crear rutas din√°micas y navegaci√≥n entre p√°ginas.",
            "lecciones": [
                {
                    "id": "c1",
                    "title": "Routing b√°sico",
                    "explicacion": "Next.js usa archivos en `pages/` para definir rutas. Puedes usar `<Link href='/about'>About</Link>` para navegar entre p√°ginas."
                },
                {
                    "id": "c2",
                    "title": "Rutas din√°micas",
                    "explicacion": "Archivos con corchetes `[id].js` permiten rutas din√°micas: `pages/post/[id].js` genera `/post/1`, `/post/2` etc."
                },
                {
                    "id": "c3",
                    "title": "API Routes",
                    "explicacion": "Puedes crear endpoints internos con `pages/api/hello.js`, permitiendo funciones serverless directamente en Next.js."
                }
            ],
            "video": "",
            "dato": "El routing din√°mico y API Routes permiten construir apps completas sin necesidad de backend externo."
        },
        {
            "id": 4,
            "title": "Renderizado y datos",
            "description": "Aprender√°s las formas de obtener y mostrar datos en Next.js.",
            "lecciones": [
                {
                    "id": "d1",
                    "title": "SSR - Server-Side Rendering",
                    "explicacion": "Usa `getServerSideProps` para obtener datos en cada request, √∫til para contenido din√°mico que cambia constantemente."
                },
                {
                    "id": "d2",
                    "title": "SSG - Static Site Generation",
                    "explicacion": "Usa `getStaticProps` para generar p√°ginas est√°ticas en build time, ideal para blogs y contenido que no cambia con frecuencia."
                },
                {
                    "id": "d3",
                    "title": "ISR - Incremental Static Regeneration",
                    "explicacion": "Permite regenerar p√°ginas est√°ticas despu√©s del build, combinando lo mejor de SSG y SSR."
                }
            ],
            "video": "",
            "dato": "Next.js ofrece m√∫ltiples estrategias de renderizado para optimizar rendimiento y SEO."
        },
        {
            "id": 5,
            "title": "Estilos y dise√±o",
            "description": "Aprender√°s a aplicar estilos y manejar assets en Next.js.",
            "lecciones": [
                {
                    "id": "e1",
                    "title": "CSS Modules",
                    "explicacion": "Permiten estilos locales por componente: `import styles from './Header.module.css';` y aplicar `className={styles.header}`."
                },
                {
                    "id": "e2",
                    "title": "TailwindCSS",
                    "explicacion": "Next.js se integra f√°cilmente con TailwindCSS para dise√±o r√°pido y responsivo."
                },
                {
                    "id": "e3",
                    "title": "Optimizaci√≥n de im√°genes",
                    "explicacion": "Next.js ofrece el componente `Image` para cargar im√°genes optimizadas autom√°ticamente, mejorando rendimiento y SEO."
                }
            ],
            "video": "",
            "dato": "Estilos optimizados y assets gestionados correctamente mejoran la experiencia de usuario y la velocidad de la web."
        },
        {
            "id": 6,
            "title": "Integraci√≥n con APIs y backend",
            "description": "Aprender√°s a conectar tu app Next.js con APIs y bases de datos externas.",
            "lecciones": [
                {
                    "id": "f1",
                    "title": "Consumir APIs externas",
                    "explicacion": "Usa `fetch` o Axios en `getServerSideProps`, `getStaticProps` o `useEffect` para mostrar datos din√°micos."
                },
                {
                    "id": "f2",
                    "title": "Conexi√≥n con bases de datos",
                    "explicacion": "Puedes integrar MySQL, PostgreSQL, MongoDB o Firebase usando API Routes o directamente en SSR/SSG."
                },
                {
                    "id": "f3",
                    "title": "Autenticaci√≥n y sesiones",
                    "explicacion": "Usa NextAuth.js o JWT para manejar autenticaci√≥n de usuarios y proteger rutas en la app."
                }
            ],
            "video": "",
            "dato": "Next.js permite crear aplicaciones completas fullstack combinando frontend y backend sin necesidad de servidor separado."
        },
        {
            "id": 7,
            "title": "Buenas pr√°cticas y optimizaci√≥n",
            "description": "Aprender√°s a escribir aplicaciones Next.js limpias, mantenibles y optimizadas.",
            "lecciones": [
                {
                    "id": "g1",
                    "title": "Organizaci√≥n de proyectos",
                    "explicacion": "Separar componentes, p√°ginas, layouts y servicios mantiene el proyecto ordenado y escalable."
                },
                {
                    "id": "g2",
                    "title": "Optimizaci√≥n de rendimiento",
                    "explicacion": "Usa renderizado est√°tico cuando sea posible, lazy loading, componentes din√°micos y optimiza im√°genes."
                },
                {
                    "id": "g3",
                    "title": "Testing y depuraci√≥n",
                    "explicacion": "Usa React DevTools, ESLint, Prettier y pruebas unitarias con Jest/Testing Library para asegurar calidad de la app."
                }
            ],
            "video": "",
            "dato": "Aplicaciones bien organizadas y optimizadas ofrecen la mejor experiencia de usuario y facilitan mantenimiento y escalabilidad."
        }
    ]
}
