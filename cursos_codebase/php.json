{
  "id": "php",
  "name": "Curso intensivo de PHP",
  "description": "Aprende PHP, el lenguaje de programaci√≥n del lado del servidor que impulsa millones de sitios web, incluyendo WordPress y plataformas din√°micas üñ•Ô∏è.",
  "modulos": [
    {
      "id": 1,
      "title": "Introducci√≥n a PHP",
      "description": "Conocer√°s qu√© es PHP, su historia, caracter√≠sticas y c√≥mo integrarlo en tus proyectos web con un servidor local o remoto.",
      "lecciones": [
        {
          "id": "a1",
          "title": "¬øQu√© es PHP y para qu√© sirve?",
          "explicacion": "PHP (Hypertext Preprocessor) es un lenguaje de programaci√≥n del lado del servidor dise√±ado para generar contenido din√°mico. Permite conectar aplicaciones con bases de datos, gestionar sesiones y crear sitios interactivos."
        },
        {
          "id": "a2",
          "title": "Historia y evoluci√≥n de PHP",
          "explicacion": "PHP fue creado por Rasmus Lerdorf en 1994. Inicialmente era un conjunto de scripts en C para rastrear visitas web. Con el tiempo se convirti√≥ en un lenguaje robusto con orientaci√≥n a objetos y frameworks modernos."
        },
        {
          "id": "a3",
          "title": "C√≥mo funciona PHP en el servidor",
          "explicacion": "PHP se ejecuta en el servidor antes de enviar el HTML al navegador. El motor de PHP interpreta el c√≥digo y genera contenido din√°mico que luego se muestra al usuario."
        },
        {
          "id": "a4",
          "title": "Instalaci√≥n y entorno local",
          "explicacion": "Para ejecutar PHP necesitas un entorno como XAMPP, WAMP o MAMP. Estos incluyen Apache, MySQL y PHP. Coloca tus archivos en la carpeta `htdocs` para servirlos localmente."
        },
        {
          "id": "a5",
          "title": "Estructura b√°sica de un archivo PHP",
          "explicacion": "El c√≥digo PHP se encierra entre etiquetas `<?php ... ?>`. Ejemplo: `<?php echo 'Hola Mundo'; ?>`. Puedes combinarlo con HTML para generar p√°ginas din√°micas."
        },
        {
          "id": "a6",
          "title": "Tu primer programa en PHP",
          "explicacion": "Crea un archivo `index.php` y escribe: `<?php echo '¬°Bienvenido al mundo PHP!'; ?>`. Guarda en `htdocs` y abre `http://localhost/index.php` en tu navegador."
        }
      ],
      "video": "",
      "dato": "PHP es la base de plataformas como WordPress, Drupal y Laravel. Su flexibilidad lo mantiene vigente m√°s de 25 a√±os despu√©s de su creaci√≥n."
    },
    {
      "id": 2,
      "title": "Variables, tipos y operadores",
      "description": "Aprender√°s c√≥mo PHP maneja datos, tipos de variables y operadores para construir l√≥gica y c√°lculos en tus programas.",
      "lecciones": [
        {
          "id": "b1",
          "title": "Declaraci√≥n de variables",
          "explicacion": "En PHP todas las variables comienzan con `$`. No necesitas declarar su tipo: `$nombre = 'Angelo'; $edad = 14;`. PHP infiere el tipo autom√°ticamente."
        },
        {
          "id": "b2",
          "title": "Tipos de datos b√°sicos",
          "explicacion": "Los principales tipos son: `string`, `int`, `float`, `bool`, `array`, `object` y `NULL`. PHP convierte tipos autom√°ticamente cuando es necesario."
        },
        {
          "id": "b3",
          "title": "Constantes y alcance de variables",
          "explicacion": "Las constantes se definen con `define('PI', 3.14);`. El alcance (`scope`) de una variable puede ser local, global o est√°tico seg√∫n su contexto."
        },
        {
          "id": "b4",
          "title": "Operadores aritm√©ticos y de comparaci√≥n",
          "explicacion": "PHP incluye operadores aritm√©ticos (`+`, `-`, `*`, `/`, `%`) y de comparaci√≥n (`==`, `===`, `!=`, `>`, `<`, `>=`, `<=`). Estos permiten evaluar y manipular datos."
        },
        {
          "id": "b5",
          "title": "Operadores l√≥gicos y ternarios",
          "explicacion": "`&&`, `||` y `!` combinan condiciones l√≥gicas. El operador ternario simplifica decisiones: `$resultado = ($edad >= 18) ? 'Adulto' : 'Menor';`."
        },
        {
          "id": "b6",
          "title": "Conversi√≥n de tipos y casting",
          "explicacion": "Puedes convertir tipos expl√≠citamente: `(int)$numero`, `(string)$valor`. Es √∫til para asegurar la coherencia de datos en operaciones cr√≠ticas."
        }
      ],
      "video": "",
      "dato": "Dominar las variables y operadores te da control total sobre la l√≥gica y el flujo de tus programas PHP."
    },
    {
      "id": 3,
      "title": "Condicionales y bucles",
      "description": "Controla el flujo de ejecuci√≥n con estructuras condicionales y ciclos de repetici√≥n en PHP.",
      "lecciones": [
        {
          "id": "c1",
          "title": "Condicionales if, elseif y else",
          "explicacion": "Permiten ejecutar c√≥digo dependiendo de condiciones. Ejemplo: `if($edad >= 18){ echo 'Mayor de edad'; } else { echo 'Menor'; }`."
        },
        {
          "id": "c2",
          "title": "Operador switch",
          "explicacion": "`switch` eval√∫a una variable contra m√∫ltiples valores. Ejemplo: `switch($dia){ case 'Lunes': echo 'Inicio de semana'; break; }`."
        },
        {
          "id": "c3",
          "title": "Bucles for y while",
          "explicacion": "`for` se usa cuando conoces el n√∫mero de iteraciones; `while` se usa cuando depende de una condici√≥n. Ejemplo: `while($i < 5){ echo $i++; }`."
        },
        {
          "id": "c4",
          "title": "Bucle foreach",
          "explicacion": "`foreach` recorre arrays f√°cilmente: `foreach($frutas as $fruta){ echo $fruta; }`. Es ideal para listas y colecciones de datos."
        },
        {
          "id": "c5",
          "title": "Control de flujo con break y continue",
          "explicacion": "`break` detiene un bucle completamente, mientras que `continue` salta a la siguiente iteraci√≥n. √ötiles para optimizar l√≥gica."
        },
        {
          "id": "c6",
          "title": "Estructuras anidadas y control avanzado",
          "explicacion": "Puedes combinar condicionales y bucles para resolver l√≥gica compleja, como validaciones o procesamiento de listas anidadas."
        }
      ],
      "video": "",
      "dato": "El control de flujo te permite crear programas din√°micos, interactivos y con l√≥gica adaptable a cualquier situaci√≥n."
    },
    {
      "id": 4,
      "title": "Funciones y manejo de formularios",
      "description": "Aprender√°s a modular tu c√≥digo con funciones reutilizables y a procesar datos enviados por formularios HTML.",
      "lecciones": [
        {
          "id": "d1",
          "title": "Definici√≥n de funciones en PHP",
          "explicacion": "Las funciones se definen con `function nombre($parametros) { }`. Permiten organizar el c√≥digo, reducir repetici√≥n y mejorar mantenibilidad."
        },
        {
          "id": "d2",
          "title": "Par√°metros, valores por defecto y retorno",
          "explicacion": "Los par√°metros pueden tener valores por defecto: `function saludar($nombre='Visitante'){ echo 'Hola '.$nombre; }`. El valor se devuelve con `return`."
        },
        {
          "id": "d3",
          "title": "√Åmbito y variables globales",
          "explicacion": "Las variables dentro de una funci√≥n son locales. Para acceder a una variable global se usa `global $variable;` o `$GLOBALS['nombre']`."
        },
        {
          "id": "d4",
          "title": "Funciones an√≥nimas y callbacks",
          "explicacion": "PHP permite funciones an√≥nimas y de callback: `$saludar = function($n){ return 'Hola '.$n; }; echo $saludar('Angelo');`."
        },
        {
          "id": "d5",
          "title": "Procesamiento de formularios HTML",
          "explicacion": "Los datos enviados desde formularios se reciben con `$_GET` o `$_POST`. Ejemplo: `$nombre = $_POST['nombre']; echo 'Hola '.$nombre;`."
        },
        {
          "id": "d6",
          "title": "Validaci√≥n y seguridad en formularios",
          "explicacion": "Usa `htmlspecialchars()` y `filter_input()` para evitar ataques XSS e inyecci√≥n de c√≥digo. Validar siempre antes de guardar o mostrar datos."
        }
      ],
      "video": "",
      "dato": "Las funciones bien dise√±adas y formularios seguros son la base de toda aplicaci√≥n PHP profesional."
    },
    {
      "id": 5,
      "title": "Arrays y estructuras de datos",
      "description": "Domina los arrays, arrays asociativos y funciones integradas para manipular informaci√≥n de manera eficiente.",
      "lecciones": [
        {
          "id": "e1",
          "title": "Arrays indexados",
          "explicacion": "Un array indexado almacena valores con √≠ndices num√©ricos: `$colores = ['rojo', 'azul', 'verde'];`. Se accede con `$colores[0];`."
        },
        {
          "id": "e2",
          "title": "Arrays asociativos",
          "explicacion": "Usan claves personalizadas: `$persona = ['nombre'=>'Angelo', 'edad'=>14]; echo $persona['nombre'];`."
        },
        {
          "id": "e3",
          "title": "Arrays multidimensionales",
          "explicacion": "Permiten manejar estructuras complejas: `$usuarios = [['nombre'=>'Ana'], ['nombre'=>'Luis']]; echo $usuarios[1]['nombre'];`."
        },
        {
          "id": "e4",
          "title": "Funciones √∫tiles para arrays",
          "explicacion": "PHP incluye funciones como `array_push()`, `array_pop()`, `array_merge()`, `array_filter()` y `array_map()` para manipular datos f√°cilmente."
        },
        {
          "id": "e5",
          "title": "Recorriendo arrays con foreach y for",
          "explicacion": "El bucle `foreach` es ideal para recorrer arrays. Tambi√©n puedes usar `for` si necesitas control sobre el √≠ndice."
        },
        {
          "id": "e6",
          "title": "Ordenamiento y b√∫squeda en arrays",
          "explicacion": "Funciones como `sort()`, `asort()`, `ksort()`, y `in_array()` permiten organizar y buscar informaci√≥n r√°pidamente."
        }
      ],
      "video": "",
      "dato": "El manejo eficiente de arrays marca la diferencia entre un script simple y una aplicaci√≥n PHP optimizada."
    },
    {
      "id": 6,
      "title": "PHP avanzado y buenas pr√°cticas",
      "description": "Aprende conceptos avanzados, control de errores, seguridad y pr√°cticas profesionales en desarrollo PHP.",
      "lecciones": [
        {
          "id": "f1",
          "title": "Manejo de errores y excepciones",
          "explicacion": "Usa `try`, `catch` y `finally` para controlar errores sin detener el flujo: `try { ... } catch(Exception $e) { echo $e->getMessage(); }`."
        },
        {
          "id": "f2",
          "title": "Inclusi√≥n de archivos y modularidad",
          "explicacion": "Divide tu aplicaci√≥n usando `include`, `require`, `include_once` y `require_once`. Esto mejora la estructura del proyecto."
        },
        {
          "id": "f3",
          "title": "Buenas pr√°cticas de c√≥digo limpio",
          "explicacion": "Usa nombres descriptivos, comentarios claros, sangr√≠a consistente y evita c√≥digo duplicado. Mant√©n un estilo uniforme."
        },
        {
          "id": "f4",
          "title": "Seguridad en PHP",
          "explicacion": "Evita ataques SQL Injection usando consultas preparadas (PDO) y sanitiza toda entrada del usuario. La seguridad nunca es opcional."
        },
        {
          "id": "f5",
          "title": "Depuraci√≥n y logging",
          "explicacion": "Usa `error_log()` y `var_dump()` para depurar. Configura `display_errors=Off` en producci√≥n y guarda logs en archivos seguros."
        },
        {
          "id": "f6",
          "title": "Estructura de proyectos profesionales",
          "explicacion": "Organiza tu c√≥digo en carpetas: `/public`, `/includes`, `/config`, `/classes`. Esto facilita el mantenimiento y la escalabilidad."
        }
      ],
      "video": "",
      "dato": "PHP moderno y seguro se basa en c√≥digo modular, validaciones robustas y arquitectura clara."
    },
    {
      "id": 7,
      "title": "Conexi√≥n y manejo de bases de datos con MySQL",
      "description": "Aprende a conectar PHP con bases de datos MySQL, realizar consultas seguras y manipular informaci√≥n de forma eficiente.",
      "lecciones": [
        {
          "id": "g1",
          "title": "Introducci√≥n a MySQL y bases de datos relacionales",
          "explicacion": "MySQL es un sistema gestor de bases de datos relacional (RDBMS). PHP puede conectarse a MySQL para leer, insertar, actualizar o eliminar informaci√≥n."
        },
        {
          "id": "g2",
          "title": "Conexi√≥n con MySQL usando MySQLi",
          "explicacion": "Puedes conectar con `mysqli_connect('localhost','usuario','clave','base');`. Usa `mysqli_query()` para ejecutar consultas SQL."
        },
        {
          "id": "g3",
          "title": "Uso de PDO (PHP Data Objects)",
          "explicacion": "PDO es una interfaz moderna y segura para bases de datos. Ejemplo: `$pdo = new PDO('mysql:host=localhost;dbname=test','root','');`."
        },
        {
          "id": "g4",
          "title": "Consultas preparadas y seguridad",
          "explicacion": "Las consultas preparadas previenen inyecciones SQL: `$stmt = $pdo->prepare('SELECT * FROM usuarios WHERE id = ?'); $stmt->execute([$id]);`."
        },
        {
          "id": "g5",
          "title": "Insertar, actualizar y eliminar datos",
          "explicacion": "Ejecuta consultas `INSERT`, `UPDATE`, `DELETE` con PDO. Siempre valida y escapa los datos antes de ejecutarlas."
        },
        {
          "id": "g6",
          "title": "Gesti√≥n de errores en consultas",
          "explicacion": "Maneja errores con `try-catch` y verifica resultados con `rowCount()`. Loguea errores para auditor√≠a sin mostrarlos al usuario."
        }
      ],
      "video": "",
      "dato": "Dominar PDO y MySQL es esencial para desarrollar sistemas de login, paneles administrativos y aplicaciones din√°micas seguras."
    },
    {
      "id": 8,
      "title": "Programaci√≥n Orientada a Objetos (POO) en PHP",
      "description": "Aprende los pilares de la POO en PHP: clases, objetos, herencia, encapsulaci√≥n y m√°s, para desarrollar software escalable.",
      "lecciones": [
        {
          "id": "h1",
          "title": "Introducci√≥n a la POO",
          "explicacion": "La POO organiza el c√≥digo en clases y objetos. Cada clase define propiedades y m√©todos que modelan entidades del mundo real."
        },
        {
          "id": "h2",
          "title": "Clases y objetos en PHP",
          "explicacion": "Una clase se define con `class Usuario {}` y se instancia con `$u = new Usuario();`. Los m√©todos se definen con `public function saludar(){}`."
        },
        {
          "id": "h3",
          "title": "Encapsulaci√≥n y modificadores de acceso",
          "explicacion": "`public`, `private` y `protected` controlan el acceso a propiedades y m√©todos, protegiendo la integridad de los objetos."
        },
        {
          "id": "h4",
          "title": "Herencia y clases hijas",
          "explicacion": "Las clases pueden heredar de otras: `class Admin extends Usuario {}`. Permite reutilizar c√≥digo y extender funcionalidades."
        },
        {
          "id": "h5",
          "title": "Polimorfismo y m√©todos sobrescritos",
          "explicacion": "El polimorfismo permite que m√©todos compartan nombre pero tengan comportamientos distintos seg√∫n la clase que los implementa."
        },
        {
          "id": "h6",
          "title": "Constructores, destructores y autoload",
          "explicacion": "`__construct()` inicializa objetos y `__destruct()` libera recursos. `spl_autoload_register()` carga clases autom√°ticamente sin `require`."
        }
      ],
      "video": "",
      "dato": "La POO permite crear sistemas extensibles, seguros y mantenibles, base de frameworks modernos como Laravel o Symfony."
    },
    {
      "id": 9,
      "title": "Sesiones, cookies y autenticaci√≥n",
      "description": "Aprende c√≥mo PHP maneja la persistencia de datos del usuario entre p√°ginas: sesiones, cookies y sistemas de login.",
      "lecciones": [
        {
          "id": "i1",
          "title": "Qu√© son las sesiones y para qu√© sirven",
          "explicacion": "Las sesiones permiten almacenar datos del usuario mientras navega. Se inician con `session_start()` y se guardan en `$_SESSION`."
        },
        {
          "id": "i2",
          "title": "Creaci√≥n y manejo de sesiones",
          "explicacion": "Ejemplo: `$_SESSION['usuario'] = 'Angelo'; echo $_SESSION['usuario'];`. Puedes destruirlas con `session_destroy()`."
        },
        {
          "id": "i3",
          "title": "Uso de cookies en PHP",
          "explicacion": "Las cookies almacenan datos en el navegador: `setcookie('tema','oscuro',time()+3600);`. Se leen con `$_COOKIE['tema'];`."
        },
        {
          "id": "i4",
          "title": "Diferencias entre sesiones y cookies",
          "explicacion": "Las sesiones son del lado del servidor y expiran al cerrar el navegador; las cookies se guardan en el cliente y tienen duraci√≥n configurable."
        },
        {
          "id": "i5",
          "title": "Sistema de login b√°sico con sesiones",
          "explicacion": "Combina formularios, MySQL y `$_SESSION` para validar usuarios. Si las credenciales son correctas, almacena la sesi√≥n y redirige al panel."
        },
        {
          "id": "i6",
          "title": "Seguridad en sesiones y cookies",
          "explicacion": "Regenera IDs con `session_regenerate_id()`, usa `httponly` en cookies y evita exponer datos sensibles en variables globales."
        }
      ],
      "video": "",
      "dato": "Las sesiones y cookies permiten construir sistemas de autenticaci√≥n y personalizaci√≥n esenciales en toda aplicaci√≥n web moderna."
    },
    {
      "id": 10,
      "title": "Manejo de archivos en PHP",
      "description": "Aprende a leer, escribir, crear y eliminar archivos desde PHP, controlando el sistema de archivos del servidor.",
      "lecciones": [
        {
          "id": "j1",
          "title": "Introducci√≥n al manejo de archivos",
          "explicacion": "PHP permite manipular archivos del servidor para crear logs, guardar datos o generar contenido din√°mico. Usa funciones como `fopen()`, `fread()` y `fwrite()`."
        },
        {
          "id": "j2",
          "title": "Lectura y escritura de archivos",
          "explicacion": "Ejemplo: `$archivo = fopen('datos.txt','r'); $contenido = fread($archivo, filesize('datos.txt')); fclose($archivo);` para leer un archivo completo."
        },
        {
          "id": "j3",
          "title": "Creaci√≥n y eliminaci√≥n de archivos",
          "explicacion": "Para crear usa `fopen('nuevo.txt','w');`. Para eliminar, `unlink('archivo.txt');`. Aseg√∫rate de tener permisos adecuados en el servidor."
        },
        {
          "id": "j4",
          "title": "Manipulaci√≥n de directorios",
          "explicacion": "Puedes crear y explorar carpetas con `mkdir()`, `rmdir()` y `scandir()`. Ideal para gestionar recursos o generar contenido din√°mico."
        },
        {
          "id": "j5",
          "title": "Subida de archivos desde formularios",
          "explicacion": "PHP permite subir archivos con `$_FILES`. Usa `move_uploaded_file()` para guardar el archivo en el servidor de forma segura."
        },
        {
          "id": "j6",
          "title": "Seguridad en la gesti√≥n de archivos",
          "explicacion": "Verifica la extensi√≥n y tipo MIME del archivo antes de guardarlo. Nunca conf√≠es en el nombre enviado por el cliente."
        }
      ],
      "video": "",
      "dato": "El control de archivos permite crear gestores de contenido, galer√≠as, sistemas de backup y m√≥dulos de subida seguros."
    },
    {
      "id": 11,
      "title": "Subida y validaci√≥n de archivos",
      "description": "Aprende el proceso completo de validaci√≥n, filtrado y almacenamiento seguro de archivos cargados por los usuarios.",
      "lecciones": [
        {
          "id": "k1",
          "title": "Configuraci√≥n del entorno para subida",
          "explicacion": "En `php.ini`, ajusta `file_uploads = On` y `upload_max_filesize`. Define el l√≠mite m√°ximo para controlar el tama√±o de los archivos."
        },
        {
          "id": "k2",
          "title": "Formulario de subida de archivos",
          "explicacion": "Crea un formulario con `enctype='multipart/form-data'`. PHP recibir√° el archivo en `$_FILES['nombre']`."
        },
        {
          "id": "k3",
          "title": "Procesando archivos subidos",
          "explicacion": "Usa `$_FILES['archivo']['tmp_name']` y `move_uploaded_file()` para mover el archivo a una carpeta segura del servidor."
        },
        {
          "id": "k4",
          "title": "Validaci√≥n del tipo y tama√±o",
          "explicacion": "Valida `$_FILES['archivo']['type']` y `$_FILES['archivo']['size']` para permitir solo formatos y tama√±os permitidos."
        },
        {
          "id": "k5",
          "title": "Prevenci√≥n de ataques mediante subida",
          "explicacion": "Evita la ejecuci√≥n de archivos maliciosos renombr√°ndolos y guard√°ndolos fuera del directorio p√∫blico. Nunca permitas subir scripts .php directamente."
        },
        {
          "id": "k6",
          "title": "Subidas m√∫ltiples de archivos",
          "explicacion": "Permite subir varios archivos con inputs m√∫ltiples: `<input type='file' name='archivos[]' multiple>`. Recorre `$_FILES['archivos']['name']` para procesarlos."
        }
      ],
      "video": "",
      "dato": "Una buena validaci√≥n de archivos es clave para evitar vulnerabilidades y mantener seguro el servidor."
    },
    {
      "id": 12,
      "title": "Validaciones y expresiones regulares",
      "description": "Aprende a validar datos de formularios con expresiones regulares y filtros integrados de PHP para asegurar la integridad de la informaci√≥n.",
      "lecciones": [
        {
          "id": "l1",
          "title": "Qu√© son las expresiones regulares",
          "explicacion": "Las expresiones regulares permiten buscar y validar patrones en cadenas. En PHP se usan con `preg_match()` y `preg_replace()`."
        },
        {
          "id": "l2",
          "title": "Validaci√≥n de correos y contrase√±as",
          "explicacion": "Ejemplo: `preg_match('/^[\\\\w.-]+@[\\\\w.-]+\\\\.\\\\w+$/', $email);` valida emails. Para contrase√±as, usa patrones que exijan may√∫sculas, n√∫meros y s√≠mbolos."
        },
        {
          "id": "l3",
          "title": "Funciones de validaci√≥n integradas",
          "explicacion": "PHP ofrece `filter_var()` con filtros como `FILTER_VALIDATE_EMAIL` o `FILTER_VALIDATE_URL`, simplificando las validaciones comunes."
        },
        {
          "id": "l4",
          "title": "Saneamiento de datos",
          "explicacion": "Usa `FILTER_SANITIZE_STRING`, `FILTER_SANITIZE_EMAIL` o `htmlspecialchars()` para eliminar caracteres peligrosos de la entrada del usuario."
        },
        {
          "id": "l5",
          "title": "Validaci√≥n de formularios paso a paso",
          "explicacion": "Combina `isset()`, `empty()` y validaciones regulares para construir formularios robustos que controlen errores y muestren mensajes personalizados."
        },
        {
          "id": "l6",
          "title": "Expresiones regulares avanzadas",
          "explicacion": "Aprende patrones avanzados como lookahead (`(?=...)`) y grupos opcionales `(?:...)` para validaciones complejas y eficientes."
        }
      ],
      "video": "",
      "dato": "La validaci√≥n es la primera l√≠nea de defensa contra ataques y errores. PHP ofrece potentes herramientas para hacerlo f√°cil y seguro."
    },
    {
      "id": 13,
      "title": "PHP y JSON: intercambio de datos moderno",
      "description": "Aprende a trabajar con JSON (JavaScript Object Notation) en PHP para comunicarte con APIs, guardar configuraciones o procesar datos externos.",
      "lecciones": [
        {
          "id": "m1",
          "title": "Qu√© es JSON y por qu√© es importante",
          "explicacion": "JSON es un formato ligero y estructurado para el intercambio de datos entre lenguajes. PHP lo usa ampliamente para APIs y configuraciones."
        },
        {
          "id": "m2",
          "title": "Codificaci√≥n y decodificaci√≥n JSON",
          "explicacion": "Usa `json_encode($array)` para convertir a JSON y `json_decode($json, true)` para convertirlo a array asociativo en PHP."
        },
        {
          "id": "m3",
          "title": "Manejo de archivos JSON",
          "explicacion": "Puedes leer y escribir archivos JSON f√°cilmente con `file_get_contents()` y `file_put_contents()` combinados con `json_encode()` y `json_decode()`."
        },
        {
          "id": "m4",
          "title": "Validaci√≥n y errores en JSON",
          "explicacion": "Despu√©s de `json_decode()`, verifica errores con `json_last_error_msg()` para detectar JSON mal formado."
        },
        {
          "id": "m5",
          "title": "Usando JSON en APIs REST",
          "explicacion": "Las APIs modernas responden en formato JSON. Env√≠a encabezados con `header('Content-Type: application/json');` antes de `echo json_encode($data);`."
        },
        {
          "id": "m6",
          "title": "Integraci√≥n de PHP con JavaScript",
          "explicacion": "Genera JSON en PHP y cons√∫melo con `fetch()` en JavaScript para crear aplicaciones web din√°micas y modernas."
        }
      ],
      "video": "",
      "dato": "JSON es el idioma universal de la web moderna. Dominarlo con PHP te abre la puerta al desarrollo de APIs y microservicios."
    },
    {
      "id": 14,
      "title": "Fechas, tiempo y correo electr√≥nico en PHP",
      "description": "Aprende a manejar fechas, zonas horarias, y a enviar correos electr√≥nicos desde PHP usando librer√≠as modernas.",
      "lecciones": [
        {
          "id": "n1",
          "title": "Manejo de fechas con DateTime",
          "explicacion": "La clase `DateTime` permite manipular fechas f√°cilmente: `$hoy = new DateTime(); echo $hoy->format('Y-m-d');`."
        },
        {
          "id": "n2",
          "title": "Zonas horarias y formatos personalizados",
          "explicacion": "Configura zonas horarias con `date_default_timezone_set('America/Lima');` y usa formatos como `d/m/Y H:i:s` para mostrar fechas legibles."
        },
        {
          "id": "n3",
          "title": "Operaciones con fechas",
          "explicacion": "Usa `DateInterval` y `DatePeriod` para sumar, restar o recorrer rangos de fechas de forma precisa y profesional."
        },
        {
          "id": "n4",
          "title": "Env√≠o de correos con mail()",
          "explicacion": "PHP incluye `mail($to, $subject, $message, $headers)`. Sin embargo, para producci√≥n se recomienda usar librer√≠as externas como PHPMailer."
        },
        {
          "id": "n5",
          "title": "Env√≠o de correos con PHPMailer",
          "explicacion": "PHPMailer permite enviar correos autenticados por SMTP, adjuntar archivos y usar HTML. Ideal para formularios de contacto o notificaciones autom√°ticas."
        },
        {
          "id": "n6",
          "title": "Buenas pr√°cticas de env√≠o y seguridad",
          "explicacion": "Usa SMTP seguro (`ssl/tls`), valida los destinatarios y nunca permitas entrada de usuarios sin sanitizar en los campos del correo."
        }
      ],
      "video": "",
      "dato": "Controlar fechas y correo electr√≥nico es esencial para automatizar reportes, notificaciones y tareas programadas."
    },
    {
      "id": 15,
      "title": "PHP moderno: Composer, namespaces y autoload",
      "description": "Descubre las herramientas modernas de PHP para gestionar dependencias, organizar c√≥digo y construir proyectos escalables.",
      "lecciones": [
        {
          "id": "o1",
          "title": "Introducci√≥n a Composer",
          "explicacion": "Composer es el gestor de dependencias de PHP. Permite instalar librer√≠as y frameworks f√°cilmente con `composer require paquete/nombre`."
        },
        {
          "id": "o2",
          "title": "Estructura de un proyecto con Composer",
          "explicacion": "Composer genera el archivo `composer.json` con las dependencias y `vendor/autoload.php` para cargarlas autom√°ticamente."
        },
        {
          "id": "o3",
          "title": "Namespaces en PHP",
          "explicacion": "Los namespaces organizan clases y evitan conflictos de nombres. Ejemplo: `namespace App\\Controllers; class HomeController {}`."
        },
        {
          "id": "o4",
          "title": "Autoload y PSR-4",
          "explicacion": "Composer usa PSR-4 para cargar autom√°ticamente clases seg√∫n su ruta. Esto elimina la necesidad de incluir manualmente los archivos."
        },
        {
          "id": "o5",
          "title": "Estructura modular del c√≥digo",
          "explicacion": "Divide tu aplicaci√≥n en m√≥dulos o capas (`Controllers`, `Models`, `Views`) siguiendo un patr√≥n MVC o similar."
        },
        {
          "id": "o6",
          "title": "Buenas pr√°cticas de organizaci√≥n",
          "explicacion": "Mant√©n dependencias actualizadas, usa versiones sem√°nticas (`^1.2`), y evita dependencias innecesarias que inflen tu proyecto."
        }
      ],
      "video": "",
      "dato": "Composer y namespaces son el ADN del PHP moderno, y dominarlo es esencial para trabajar con frameworks como Laravel o Symfony."
    },
    {
      "id": 16,
      "title": "Creaci√≥n de APIs RESTful con PHP",
      "description": "Aprende a construir APIs modernas con PHP, manejar peticiones HTTP, autenticaci√≥n por tokens y respuestas en JSON.",
      "lecciones": [
        {
          "id": "p1",
          "title": "Qu√© es una API REST y c√≥mo funciona",
          "explicacion": "Una API REST usa los m√©todos HTTP (`GET`, `POST`, `PUT`, `DELETE`) para interactuar con datos. PHP puede implementarlas enviando y recibiendo JSON."
        },
        {
          "id": "p2",
          "title": "Configurando el entorno de una API",
          "explicacion": "Organiza tu API en carpetas (`/routes`, `/controllers`, `/models`) y usa `header('Content-Type: application/json');` para definir el formato de salida."
        },
        {
          "id": "p3",
          "title": "Manejo de solicitudes HTTP en PHP puro",
          "explicacion": "Usa `$_SERVER['REQUEST_METHOD']` para detectar el tipo de petici√≥n y `file_get_contents('php://input')` para leer datos enviados en JSON."
        },
        {
          "id": "p4",
          "title": "Autenticaci√≥n con tokens y JWT",
          "explicacion": "Usa tokens JWT (JSON Web Tokens) para proteger rutas privadas. Verifica la validez y caducidad del token antes de permitir acceso a los recursos."
        },
        {
          "id": "p5",
          "title": "Manejo de errores y respuestas HTTP",
          "explicacion": "Devuelve c√≥digos HTTP apropiados (`200 OK`, `400 Bad Request`, `401 Unauthorized`, `500 Server Error`) junto a mensajes en formato JSON."
        },
        {
          "id": "p6",
          "title": "Buenas pr√°cticas y versionado de APIs",
          "explicacion": "Versiona tus endpoints (`/api/v1/usuarios`) y documenta con Swagger o Postman para mantener consistencia y facilitar integraci√≥n externa."
        }
      ],
      "video": "",
      "dato": "Construir APIs RESTful en PHP te abre las puertas al desarrollo de microservicios, apps m√≥viles y sistemas distribuidos."
    },
    {
      "id": 17,
      "title": "Introducci√≥n a Frameworks PHP modernos (Laravel y Slim)",
      "description": "Descubre c√≥mo los frameworks modernos simplifican el desarrollo con estructuras profesionales, routing avanzado y ORM integrados.",
      "lecciones": [
        {
          "id": "q1",
          "title": "Qu√© es un framework y por qu√© usarlo",
          "explicacion": "Un framework proporciona una estructura base con herramientas listas para usar, reduciendo c√≥digo repetitivo y mejorando la seguridad y escalabilidad."
        },
        {
          "id": "q2",
          "title": "Laravel: el gigante de PHP",
          "explicacion": "Laravel ofrece un potente ORM (Eloquent), rutas limpias, plantillas Blade y autenticaci√≥n integrada. Se instala con `composer create-project laravel/laravel nombre-proyecto`."
        },
        {
          "id": "q3",
          "title": "Slim Framework: microframework ligero",
          "explicacion": "Slim es ideal para APIs y microservicios. Define rutas r√°pidas con `$app->get('/usuarios', function() { ... });`. R√°pido, simple y elegante."
        },
        {
          "id": "q4",
          "title": "Routing, controladores y vistas",
          "explicacion": "Los frameworks separan rutas, controladores y vistas para mantener el c√≥digo limpio y modular, siguiendo el patr√≥n MVC."
        },
        {
          "id": "q5",
          "title": "ORM y conexi√≥n a bases de datos",
          "explicacion": "Eloquent (Laravel) y Medoo (Slim) permiten interactuar con bases de datos usando objetos, evitando escribir SQL manualmente."
        },
        {
          "id": "q6",
          "title": "Buenas pr√°cticas con frameworks",
          "explicacion": "Usa migraciones, seeders y control de versiones. Mant√©n tus dependencias actualizadas con Composer y sigue las normas PSR."
        }
      ],
      "video": "",
      "dato": "Los frameworks te permiten desarrollar m√°s r√°pido, con c√≥digo limpio, seguro y escalable, listo para entornos empresariales."
    },
    {
      "id": 18,
      "title": "Despliegue y optimizaci√≥n de proyectos PHP",
      "description": "Aprende c√≥mo publicar, escalar y optimizar tus proyectos PHP en entornos de producci√≥n reales.",
      "lecciones": [
        {
          "id": "r1",
          "title": "Preparando tu proyecto para producci√≥n",
          "explicacion": "Elimina archivos de prueba, desactiva `display_errors`, activa cach√© de OPcode y configura `.env` para variables de entorno seguras."
        },
        {
          "id": "r2",
          "title": "Despliegue en servidores compartidos y VPS",
          "explicacion": "Usa FileZilla o Git para subir archivos a un hosting o VPS. Configura Apache o Nginx para apuntar al directorio `/public` de tu aplicaci√≥n."
        },
        {
          "id": "r3",
          "title": "Configuraci√≥n de entornos con Docker",
          "explicacion": "Dockeriza tu app creando un `Dockerfile` y `docker-compose.yml` con servicios PHP, MySQL y Nginx. Facilita la portabilidad y despliegue."
        },
        {
          "id": "r4",
          "title": "Optimizaci√≥n de rendimiento",
          "explicacion": "Usa cach√© (`OPcache`, `Redis`), minimiza consultas SQL y comprime respuestas. Monitorea tu app con herramientas como New Relic o Blackfire."
        },
        {
          "id": "r5",
          "title": "Seguridad en entornos productivos",
          "explicacion": "Usa HTTPS, permisos m√≠nimos en archivos, sanitiza entradas y bloquea acceso directo a configuraciones sensibles como `.env` o `/config`."
        },
        {
          "id": "r6",
          "title": "Mantenimiento y escalabilidad",
          "explicacion": "Implementa backups autom√°ticos, logs rotativos y CI/CD. Escala horizontalmente usando balanceadores de carga y m√∫ltiples instancias del servidor."
        }
      ],
      "video": "",
      "dato": "Desplegar correctamente un proyecto PHP es el paso que te separa del entorno local al mundo real. Es donde tu c√≥digo se vuelve producci√≥n."
    }
  ]
}
